
Project brief
In this skill-building project, you will deploy a scalable web application environment on Amazon Web Services (AWS) using EC2 instances and an Elastic Load 
Balancer (ELB). You will set up a sample web application hosted on two EC2 instances and configure an ELB to distribute incoming traffic evenly between them. 
The project is designed to be completed in approximately 6–8 hours.

Scalable web architectures are essential for ensuring high availability, reliability, and performance in modern digital services. Load balancing across multiple 
servers allows applications to handle more users, reduce downtime, and respond gracefully to varying traffic conditions.

This project focuses on simulating a real-world, scalable deployment architecture commonly used in production environments. You will work with key AWS services 
to understand infrastructure management, traffic distribution, and basic fault tolerance. Your tasks will include instance provisioning, application deployment, 
load balancer configuration, and testing the load distribution.

Building on your existing understanding of cloud computing and web applications, you will progress through a guided series of steps that help you move from local
deployment to a cloud-hosted, balanced setup.

As you progress, you will:

Launch and configure two EC2 instances to host your sample web application.
Set up and configure an Elastic Load Balancer to manage incoming traffic.
Test the load balancer by simulating web traffic and monitoring response distribution.
Explore basic fault tolerance and performance considerations.
By completing this project, you will gain hands-on experience in deploying and managing scalable applications in the cloud. You can showcase this project in your 
portfolio to demonstrate your cloud infrastructure skills and your ability to build resilient, production-ready environments. This project is ideal whether you are looking to break into DevOps, cloud engineering, or scale your existing expertise.




Scalability and reliability: Deploy a sample web application across multiple EC2 instances and configure an Elastic Load Balancer (ELB) to ensure the system can
handle increased traffic and remain accessible even if one instance fails




Task 1: Launch EC2 instances
Objective: Set up two Amazon EC2 instances to host the sample web application.

(Remember to take screenshots of each step and include them in your project documentation.)

Step 1
Launch two EC2 instances using the Amazon Linux 2 AMI and the t2.micro instance type.

Step 2
Create and configure a security group that allows inbound traffic on port 22 (SSH) and port 80 (HTTP).

Step 3
Note the public IP address or public DNS of each instance for later testing.

Task 2: Deploy the web application
Objective: Host a simple HTML page or static website on both EC2 instances.

(Remember to take screenshots of each step and include them in your project documentation.)

Step 1
Connect to each EC2 instance via SSH using your terminal or preferred SSH client.

Step 2
Deploy a basic HTML page for each instance using a simple web server such as a Python HTTP server or nginx.

Step 3
Open the public IP of each instance in your browser to confirm that the web page loads successfully.



Task 3: Set up the load balancer
Objective: Configure an Application Load Balancer (ALB) to distribute traffic between your EC2 instances.

(Remember to take screenshots of each step and include them in your project documentation.)

Step 1
Navigate to the EC2 Console and create an Application Load Balancer with an internet-facing scheme using HTTP on port 80.

Step 2
Create a target group with “instance” as the target type and add both EC2 instances to it.

Step 3
Configure the health check path and associate the target group with the load balancer before completing the setup.



Task 4: Test the load balancer traffic distribution
Objective: Ensure that the load balancer is routing traffic evenly between the two instances.

(Remember to take screenshots of each step and include them in your project documentation.)

Step 1
Access the DNS name of the load balancer in your web browser.

Step 2
Refresh the page several times and observe alternating responses from each instance to confirm load distribution.

Step 3
Optionally, stop one instance to test whether the load balancer routes all traffic to the healthy instance, demonstrating basic fault tolerance.







