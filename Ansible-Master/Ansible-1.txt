Gathering facts:-
-Ansible Facts are automatically collected pieces of system information about managed nodes — things like OS, IP, CPU, and memory.
This process is called gathering facts.
setup module:-
handles gathering facts which runs by default at the start of a playbook
ansible all -m setup-- Get all detailed information of managed node.
ansible all -m setup -a "filter=ansible_memory_mb". -- return only memory-related facts

There are 2 types of facts in ansible
Default facts- Default facts provide system level facts automatically using setup module.
Custom facts - custom facts we defined manually when default fact not sufficient to provide required information.

custom facts are stored locally on managed node under /etc/ansible/facts.d/ directory.
sudo mkdir -p /etc/ansible/facts.d
sudo vi /etc/ansible/facts.d/custom.fact
content:-
[custom]
application_role=backend
environment=production
team=DevOps

----------------------------------------------------------------------------------------------------------------------------------------------------------------
Adhoc commands:-
Ansible adhoc command are one line commands which are useful for testing connectivity, managing services, copying files, or running updates on multiple nodes quickly.
adhoc commands uses Ansible modules- eg ping, copy, apt.
I used adhoc commands for one-time or verification tasks.-  its very useful to check which nodes are reachable , restarting service across 50 servers. or ensuring package is installed.


ansible all -m ping  -- To check ping connectivity of remote servers
ansible all -a 'df -h' -- To get login information without logging into each server.
ansible all -m shell -a "uptime"  -- To check uptime of remote server.
ansible webservers -b -m apt -a "name=nginx state=present update_cache=yes" -- To update packages across multiple nodes.
ansible webservers -b -m service -a "name=nginx state=restarted"  --Service module to start, stop, restart services.
ansible webservers -b -m service -a "name=nginx enabled=no" -- disable the service at boot.
ansible all -m copy -a "src = /root/ansible/shri.txt dest = /opt/shri.txt " - To copy file on remote servers.
ansible all -m copy -a "content='welcome devops' dest=/opt/shri.txt" - Write content to remote file.
ansible all -m file -a "dest=/tmp/test.txt state=touch" - Create a file on remote servers
ansibel all -m file -a "dest=/tmp/test.txt state=absent" - Remove files from remote servers
ansible all -m file -a "dest=/tmp/devops state=directory mode=0755" - Create directory with permission on rem server.
ansible all -m user -a "name=devops state=present" - create user on remote server.
ansible all -m user -a "name=devuser state=absent remove=yes" - Remove user
ansible all -m user -a "name=devops groups=sudo append=yes"
ansible all -m apt -a "name=apache2 state=present update_cache=yes" -b - Install package on remote server.
ansible all -m service -a "name=apache2 state=restarted" -b -Restart a service.


Gather facts:-
  ansible all -m setup - Gather facts such as CPU, Memory, disk , networking.
  ansible all -m setup -a "filter=ansible_memory_mb" - Memory related facts

shell command:-
ansible all -m shell -a "uptime"
ansible all -m shell -a "df -h"

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

PLAYBOOK:


installation of NGINX:

nginx_setup.yaml
name: install and start nginx
hosts: webservers
become: yes
tasks: 
  - name: Install nginx
    apt:
      name: nginx
      state: present 
      update_cache: yes
  - name: start and enable service
    service:
       name: nginx
       state: started
       enabled: yes
    

To run the playbook
ansible-playbook nginx_setup.yaml

------------------------------------------------------------------------------------------------------------------------------------------------------------------

- name: Intro of playbook
  hosts: all
  become: yes
 
  tasks:
    - name: "checking connection via ping"
      ping:

- name: Intro of playbook
  hosts: all
  become: yes
  gather_facts: false

  tasks:
    - name: "checking connection via ping"
      ping:




-name: installation of docker
 hosts: webservers
 become: yes
 tasks:
  - name: install docker
    apt: 
      name: docker.io
      state: present
      update_cache: yes
  - name: Ensure docker service is running
    service:
      name: docker
      state: started
      enabled: yes
  - name: Run Nginx container
     docker_conatiner:
       name: nginx
       image: nginx:latest
       ports:
         - "80:80"

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


Ansible connected to remote host using default transport protocol called as smart which selects best SSH method depending on controller OS and SSH version.
ansible uses register keyword to capture the output of module into variable, that variable can then be referenced in later task using jinja2 techniques. this allows us to pass dynamic 
information from one task to another.

---
- name: Demo of register variable
  hosts: webservers
  become: yes
  tasks:
    - name: Check uptime of server
      command: uptime
      register: uptime_result

    - name: Print the uptime output
      debug:
        var: uptime_result.stdout

What Is debug in Ansible?
The debug module is used to print messages, variables, or facts to the terminal output during a playbook run.
It helps you understand what’s going on inside your playbook.
   
   - name: check disk usage
     comamnd: df -h /
     register: disk_check

   - name: debug disk usage result 
     debug:
     msg: "{{ disk_check.stdout }}"

Ensuring disk space before installing something large like docker or database.


What is ansible loops?

Ansible loop is used to repeat task of code multiple times in ansible playbook.
we can install multiple packages with apt + loop.

- name: Install multiple packahges
  apt:
     name: "{{ iteam }}"
     state: present 
  loop:
   - nginx:
   - git
   - curl

while provisioning Linux servers using Ansible, I often install multiple packages like nginx, git, curl, and others. Instead of writing separate 
   tasks for each, I use the loop directive with the apt module to iterate over a list of package names. This keeps my playbooks clean, modular, and 
   DRY — and it's fully idempotent.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Ansible handler:-

A handler in Ansible is a special type of task that only runs when it is notified by another task.
Typically, handlers are used to perform actions like restarting a service, but only when needed (e.g., after a config file changes).

 I use handlers to perform actions like restarting services or reloading configurations — but only when a task makes a change. This keeps my 
 playbooks efficient and idempotent. For example, I notify an NGINX restart only when the config file changes, using the template module. It avoids 
 unnecessary restarts and keeps automation clean.”

---
- name: Handler Demo - Restart Nginx only when file changes
  hosts: webservers
  become: yes

  tasks:
    - name: Install Nginx
      ansible.builtin.apt:
        name: nginx
        state: present
        update_cache: yes

    - name: Deploy index.html to web root
      ansible.builtin.copy:
        src: /home/ubuntu/index.html
        dest: /var/www/html/index.html
      notify:
        - Restart Nginx

  handlers:
    - name: Restart Nginx
      ansible.builtin.service:
        name: nginx
        state: restarted


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Ansible Role:-










































































